
*TypeInf> :l TypeInf
:l TypeInf
[1 of 3] Compiling Term             ( Term.hs, interpreted )
[2 of 3] Compiling Unification      ( Unification.hs, interpreted )
[3 of 3] Compiling TypeInf          ( TypeInf.hs, interpreted )
Ok, modules loaded: Unification, TypeInf, Term.
*TypeInf> typeof (Abs "x" (Var "x"))
typeof (Abs "x" (Var "x"))
(a -> a)
*TypeInf> typeof (Ap (Abs "x" (Var "x"))(Abs "x" (Var "x")))
typeof (Ap (Abs "x" (Var "x"))(Abs "x" (Var "x")))
(a -> a)
*TypeInf> typeof (Abs "x" (Abs "y" (Ap (Var "y") (Var "x"))))
typeof (Abs "x" (Abs "y" (Ap (Var "y") (Var "x"))))
(a -> ((a -> b) -> b))
*TypeInf> typeof (Abs "x" (Abs "y" (Abs "z" (Ap (Ap (Var "x") (Var "z"))(Ap (Var "y") (Var "z"))))))
typeof (Abs "x" (Abs "y" (Abs "z" (Ap (Ap (Var "x") (Var "z"))(Ap (Var "y") (Var "z"))))))
((a -> (b -> c)) -> ((a -> b) -> (a -> c)))
*TypeInf> typeof (Pair (Abs "x" (Var "x")) (Abs "x" (Var "x")))
typeof (Pair (Abs "x" (Var "x")) (Abs "x" (Var "x")))
((a -> a) X (b -> b))
*TypeInf> typeof (Fst (Pair (Abs "x" (Var "x")) (Abs "x" (Var "x"))))
typeof (Fst (Pair (Abs "x" (Var "x")) (Abs "x" (Var "x"))))
(a -> a)
*TypeInf> typeof (Fst (Pair (Abs "x" (Abs "y" (Ap (Var "y") (Var "x")))) (Abs "x" (Var "x"))))
typeof (Fst (Pair (Abs "x" (Abs "y" (Ap (Var "y") (Var "x")))) (Abs "x" (Var "x"))))
(a -> ((a -> b) -> b))
*TypeInf> typeof (Snd (Pair (Abs "x" (Abs "y" (Ap (Var "y") (Var "x")))) (Abs "x" (Var "x"))))
typeof (Snd (Pair (Abs "x" (Abs "y" (Ap (Var "y") (Var "x")))) (Abs "x" (Var "x"))))
(a -> a)
*TypeInf> 