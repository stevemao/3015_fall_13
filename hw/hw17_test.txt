Main> breadthfirst (mkBTree [1..4])
breadthfirst (mkBTree [1..4])
[1,2,3,4]
Main> breadthfirst (mkBTree (reverse [1..4] ++ [1..4]))
breadthfirst (mkBTree (reverse [1..4] ++ [1..4]))
[4,3,1,2,1,2,3,4]
Main> breadthfirst (mkBTree ['a'..'z'])
breadthfirst (mkBTree ['a'..'z'])
"abnchoudfikprvxegjlmqstwyz"
Main> (breadthfirst . mkBTree) [1..4]
(breadthfirst . mkBTree) [1..4]
[1,2,3,4]
Main> (breadthfirst . mkBTree) ['a'..'z']
(breadthfirst . mkBTree) ['a'..'z']
"abnchoudfikprvxegjlmqstwyz"
Main> (breadthfirst . mkBTree) [1..26]
(breadthfirst . mkBTree) [1..26]
[1,2,14,3,8,15,21,4,6,9,11,16,18,22,24,5,7,10,12,13,17,19,20,23,25,26]
Main> let f = (breadthfirst . mkBTree) in (f . f) [1..26]
let f = (breadthfirst . mkBTree) in (f . f) [1..26]
[1,2,22,14,4,24,17,3,15,6,11,5,10,19,23,8,21,9,16,18,7,12,13,20,25,26]
Main> let f = (breadthfirst . mkBTree) in (f . f . f) [1..26]
let f = (breadthfirst . mkBTree) in (f . f . f) [1..26]
[1,2,19,22,3,23,7,14,24,15,11,8,9,12,20,4,17,6,5,10,21,16,18,13,25,26]
Main> let f = (breadthfirst . mkBTree) in (f . f . f) ['a'..'z']
let f = (breadthfirst . mkBTree) in (f . f . f) ['a'..'z']
"absvcwgnxokhiltdqfejuprmyz"
Main> let f = (breadthfirst . mkBTree) in (f . f . f . f . f . f . f . f . f) ['a'..'z']
< . mkBTree) in (f . f . f . f . f . f . f . f . f) ['a'..'z']
"abcdefghijklmnopqrstuvwxyz"
Main> let f = (breadthfirst . mkBTree) in (f . f . f . f . f . f . f . f) ['a'..'z']
< . mkBTree) in (f . f . f . f . f . f . f . f) ['a'..'z']
"abdhpiqejrkstcflumvwgnxoyz"
Main> 
