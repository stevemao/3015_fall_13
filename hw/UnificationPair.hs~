module Unification where
        
import Data.List
import Data.Char

data Op = Arrow | Product 
        deriving (Eq,Show)
data  Type =   TVar  String |  BinType Op  Type   Type
        deriving (Eq)
        
instance Show Type where
   show (TVar x) = x
   show (BinType Arrow t1 t2) = "(" ++ show t1 ++ " -> " ++ show t2 ++ ")"
   show (BinType Product t1 t2) = "(" ++ show t1 ++ " X " ++ show t2 ++ ")"

type Substitution = (String -> Type)

idSubst :: Substitution
idSubst x = TVar x

update :: (String, Type) -> Substitution -> Substitution
update (x,y) f = (\z -> if z == x then y else f z)


-- vars collects all the variables orricing in a type expression
vars :: Type -> [String]
vars ty = nub (vars' ty) 
    where vars' (TVar x) = [x]
          vars' (BinType op t1 t2) = vars' t1 ++ vars' t2

subst :: Substitution -> Type -> Type
subst s (TVar x) = s x
subst s (BinType op t1 t2) = BinType op (subst s t1) (subst s t2)

unify :: Type -> Type -> Substitution
unify (TVar x) (TVar y) = update (x, TVar y) idSubst
unify (TVar x) (BinType op t1 t2) =  
      if x `elem` (vars (BinType op t1 t2)) then
           error ("unify: Occurs check failure on " ++ x ++ ".")
      else
           update (x, BinType op t1 t2) idSubst
unify (BinType op t1 t2) ( TVar x)  = unify (TVar x) (BinType op t1 t2)
unify (BinType op t1 t2) (BinType op' t3 t4) = 
        if op == op' then
          (subst s2) .  s1
        else
          error "unify: not unifiable."
      where s1 = unify t1 t3
            s2 = unify (subst s1 t2) (subst s1 t4)

type Constraint = (Type,Type)

unifyL :: [Constraint] -> Substitution
unifyL xs = unifyAll xs idSubst
   where unifyAll [] ans = ans
         unifyAll ((t1,t2):cs) ans = unifyAll (map substpair cs) ((subst s) . ans)
            where s = unify t1 t2
                  substpair (t1,t2) = (subst s t1, subst s t2)


-- unifyL = foldl f idSubst 
--   where f s (t1,t2) = ((subst s) . (unify (subst s t1)(subst s t2)))

test_unifyL xs = map (\(t1,t2) -> ((t1,t2), (subst s t1, subst s t2))) xs
   where s = unifyL xs 

test_unify t1 t2 = 
     let s = unify t1 t2 in
        do print ("s = " ++ show (map (\x -> (TVar x, subst s (TVar x))) (nub (vars t1 ++ vars t2))))
           print ("subst s " ++ show t1 ++ " = " ++ show (subst s t1))
           print ("subst s " ++ show t2 ++ " = " ++ show (subst s t2))
           return ()

-- test_unify (TVar "a") (TVar "b")
-- test_unify (BinType Arrow (TVar "a") (TVar "b")) (TVar "a") 
-- test_unify (BinType Arrow (TVar "a") (TVar "b")) (TVar "b") 
-- test_unify (BinType Arrow (TVar "a") (TVar "b")) (TVar "c") 
-- test_unify (BinType Arrow (TVar "a") (TVar "b")) (BinType Arrow (TVar "c") ( TVar "a"))
-- test_unify (BinType Arrow (TVar "a") (TVar "b")) (BinType Arrow (TVar "b") ( TVar "a"))
-- test_unify (BinType Arrow (TVar "a") (TVar "b")) (BinType Arrow (TVar "b") ( BinType Arrow(TVar "a") (TVar "b")))
-- test_unify (BinType Arrow (TVar "a") (TVar "b")) (BinType Arrow (TVar "b") ( BinType Arrow(TVar "a") (TVar "b")))
-- test_unify (BinType Arrow (TVar "a") (TVar "b")) (BinType Arrow (TVar "b") ( BinType Arrow(TVar "a") (TVar "b")))
-- test_unify (BinType Arrow (TVar "a") (TVar "a")) (BinType Arrow (BinType Product (TVar "b") (TVar "c")) (TVar "d"))
-- test_unify (BinType Arrow (TVar "a") (TVar "a")) (BinType Arrow (BinType Product (TVar "b") (TVar "c")) (TVar "d"))
-- test_unify (BinType Arrow (TVar "a") (TVar "a")) (BinType Arrow (BinType Product (TVar "b") (TVar "c")) (TVar "c"))
-- test_unify (BinType Product (TVar "a") (TVar "b"))  (BinType Product (TVar "b") (TVar "c")) 
